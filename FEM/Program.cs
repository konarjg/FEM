using Accord.IO;
using FEM;
using MathNet.Numerics;
using MathNet.Numerics.LinearAlgebra;
using ScottPlot;
using System.Diagnostics;
using FEM.Symbolics;
using Generate = MathNet.Numerics.Generate;
using Accord;
using System.Drawing;
using Accord.Math;
using ScottPlot.Plottable;

Console.WriteLine("-------------------------------------------\n|\t    Triangular Mesh               |\n-------------------------------------------");
var err = FEMSolver2DTriangular.Solve(new string[] { "-1/2", "-1/(2*x^2)", "-1/(2*x)", "0", "0" }, new double[,] { { 0, 1 }, { 0, 2 * Math.PI } }, 80, 10, true);
Console.WriteLine("-------------------------------------------");
Console.WriteLine("|               RRMSE = {0:0.0}%              |", err);
Console.WriteLine("-------------------------------------------\n\n-------------------------------------------\n|\t    Rectangular Mesh              |\n-------------------------------------------");
err = FEMSolver2DRectangular.Solve(new string[] { "-1/2", "-1/(2*x^2)", "-1/(2*x)", "0", "0" }, new double[,] { { 0, 1 }, { 0, 2 * Math.PI } }, 80, 10);
Console.WriteLine("-------------------------------------------");
Console.WriteLine("|               RRMSE = {0:0.0}%              |", err);
Console.WriteLine("-------------------------------------------\n");